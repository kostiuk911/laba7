#include <iostream>
#include <cmath>

using namespace std;

void findLocalMinima(int** matrix, int n) {
    int count = 0;
    for (int i = 1; i < n - 1; i++) {
        for (int j = 1; j < n - 1; j++) {
            bool isLocalMinimum = true;
            for (int k = i - 1; k <= i + 1; k++) {
                for (int l = j - 1; l <= j + 1; l++) {
                    if (matrix[k][l] < matrix[i][j]) {
                        isLocalMinimum = false;
                        break;
                    }
                }
            }
            if (isLocalMinimum) {
                count++;
            }
        }
    }
    cout << "Number of local minima: " << count << endl;
}

int sumAboveMainDiagonal(int** matrix, int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            sum += abs(matrix[i][j]);
        }
    }
    return sum;
}

int main() {
    int n = 5;
    int** matrix = new int* [n];
    for (int i = 0; i < n; i++) {
        matrix[i] = new int[n];
    }
    matrix[0][0] = 9; matrix[0][1] = 8; matrix[0][2] = 7; matrix[0][3] = 6; matrix[0][4] = 5;
    matrix[1][0] = 3; matrix[1][1] = 2; matrix[1][2] = 1; matrix[1][3] = 0; matrix[1][4] = 4;
    matrix[2][0] = 6; matrix[2][1] = 3; matrix[2][2] = 4; matrix[2][3] = 5; matrix[2][4] = 2;
    matrix[3][0] = 4; matrix[3][1] = 7; matrix[3][2] = 3; matrix[3][3] = 6; matrix[3][4] = 1;
    matrix[4][0] = 5; matrix[4][1] = 1; matrix[4][2] = 6; matrix[4][3] = 3; matrix[4][4] = 2;

    findLocalMinima(matrix, n);
    cout << "Sum of elements above main diagonal: " << sumAboveMainDiagonal(matrix, n) << endl;

    for (int i = 0; i < n; i++) {
        delete[] matrix[i];
    }
    delete[] matrix;

    return 0;
}
